<?php

require_once('db/DbTable.class.php');

class ActiveRecordGenerator {

	private $tableName;
	
	public function getArClassContent(){
		return "<?php\n/* autogenerated active record */\n\nrequire_once('db/active_record/ActiveRecord.class.php');\n\n" . $this->_getClassContent();
	}
	
	public function getClassContent(){
		return "<?php\n\nrequire_once('model/active_record/".$this->getArNameClass().".class.php');\n\nclass ".$this->getNameClass(). " extends ".$this->getArNameClass()." {\n	\n}";
	}
	
	
	public function __construct($tableName){
		
		$this->tableName = $tableName;
	}
	
	private function _getClassContent() {
		$tableName = $this->tableName;
		
		$table = new DbTable($tableName);
		$meta = $table->retriveTableMetadate();
		
		$key = $meta->getPrimaryKey();
		
		$classProps = "\n\n	protected \$classProperties = array(\n";
		
		$vars = "\n";
		$getSets = "\n\n";
		
		foreach ($meta->fields as $field){
			
				
			$name = $this->getConvertedNameVar($field['name']);
			
			if ($key != $field['name']){
				$vars .= "\n	protected \$".$name.";";
				
				$nameFunc = $this->getConvertedNameFunc($name);
				
				$getSets .= "	public function get$nameFunc() {\n";
				$getSets .= "		return \$this->$name;\n	}\n\n";
				
				$getSets .= "	public function set$nameFunc(\$$name) {\n";
				$getSets .= "		\$this->$name = \$$name;\n	}\n\n";
			}
			$classProps .= "		'{$name}' => array( 'column' => '" . $field['name'] . "' ),\n";
		}
		
		$classProps .= "	);\n";
		
		$textClass = "class ".$this->getArNameClass()." extends ActiveRecord {".
			$vars.
			$classProps.
			"\n	public function __construct() {\n		parent::__construct('$tableName');\n	}".
			$getSets.
			"\n}";
		return $textClass;
	}
	
	public function getArNameClass(){
		return "ActRec".$this->getNameClass();
	}
	
	public function getNameClass(){
		$names = explode("_",$this->tableName);
		$name = "";
		foreach ($names as $k => $nameOne){
			$name .= strtoupper(substr($nameOne,0,1)).strtolower(substr($nameOne,1));
		}
		return $name;
	}
	
	private function getConvertedNameFunc($varName){
		//$varName = ;
		return strtoupper(substr($varName,0,1)).substr($varName,1);
	}
	
	private function getConvertedNameVar($field){
		$names = explode("_",$field);
		$name = "";
		foreach ($names as $k => $nameOne){
			if($k){//2,3st... inerations
				$name .= strtoupper(substr($nameOne,0,1)).strtolower(substr($nameOne,1));
			}
			else{//1st iteration
				$name .= strtolower($nameOne);
			}
		}
		return $name;
	}
}
